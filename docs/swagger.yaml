definitions:
  agent.Ambient:
    properties:
      humid:
        description: Humid - Humidity (percent)
        example: 50.3
        type: number
      last_fetch:
        description: LastFetch - Fetched date
        example: 2020-01-01 01:02:03 UTC
        type: string
      pressure:
        description: Pressure - Pressure (hpa)
        example: 1009.4
        type: number
      temp:
        description: Temp - Temperature (celsius)
        example: 27.5
        type: number
    type: object
  agent.SwitchBot:
    properties:
      mac:
        example: xx:xx:xx:xx:xx:xx
        type: string
      state:
        example: "ON"
        type: string
      type:
        example: TOGGLE
        type: string
    type: object
  aircon.Entry:
    properties:
      fan:
        example: auto
        type: string
      horizontal_vane:
        example: auto
        type: string
      humid:
        example: 50%
        type: string
      mode:
        example: cool
        type: string
      operation:
        example: false
        type: boolean
      temp:
        type: object
      vertical_vane:
        example: auto
        type: string
    type: object
  aircon.ModeEntry:
    properties:
      fan:
        example: auto
        type: string
      horizontal_vane:
        example: swing
        type: string
      humid:
        example: 50%
        type: string
      temp:
        type: object
      vertical_vane:
        example: swing
        type: string
    type: object
  aircon.State:
    properties:
      mode:
        example: cool
        type: string
      modes:
        additionalProperties:
          $ref: '#/definitions/aircon.ModeEntry'
        type: object
      operation:
        example: false
        type: boolean
    type: object
  controller.Entry:
    properties:
      aircon:
        $ref: '#/definitions/aircon.State'
        description: Aircon - State of Aircon
      id:
        description: ID - Generated ID
        example: <UNIQUE_ID>
        type: string
      kind:
        description: Kind - AIRCON, LIGHT, SWITCHBOT...
        example: AIRCON
        type: string
      light:
        $ref: '#/definitions/light.State'
        description: Light - State of Light
      name:
        description: Name - ex. Bedroom Airconditioner
        example: Bedroom Airconditioner
        type: string
      remote:
        $ref: '#/definitions/controller.Remote'
        description: Remote - Remote Controller settings (required when type is REMOTE)
      switchbot:
        $ref: '#/definitions/agent.SwitchBot'
        description: SwitchBot - SwitchBot settings (required when type is SWITCHBOT)
      type:
        description: Type - type of controller (how to use?) / ex. REMOTE, SWITCHBOT...
        example: REMOTE
        type: string
    required:
    - kind
    - name
    - type
    type: object
  controller.Remote:
    properties:
      model:
        example: daikin01
        type: string
      vendor:
        example: daikin
        type: string
    type: object
  light.Entry:
    properties:
      action:
        description: |-
          Action - OFF, ON, NIGHT_LIGHT, ALL_LIGHT, TO_WARM, TO_COOL, TO_BRIGHT, TO_DIM
          Direct Action (Use by when not support state-based signal)
        example: "OFF"
        type: string
    type: object
  light.State:
    properties:
      last_action:
        description: LastAction - Issued last action...
        example: "OFF"
        type: string
    type: object
  room.Entry:
    properties:
      id:
        description: ID - Room ID
        type: string
      name:
        description: 'Name - Room name (ex: `john''s room`)'
        example: john's room
        type: string
    type: object
  room.Room:
    properties:
      ambient:
        $ref: '#/definitions/agent.Ambient'
        description: Ambient - Room ambient (from agent)
      id:
        description: ID - Room ID
        type: string
      name:
        description: 'Name - Room name (ex: `john''s room`)'
        example: john's room
        type: string
    type: object
  server.CreateRoomRequest:
    properties:
      name:
        example: john's room
        type: string
    type: object
  server.GetRemotesResponse:
    properties:
      aircon:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      light:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
    type: object
  server.RemoteController:
    properties:
      model:
        example: daikin01
        type: string
      vendor:
        example: daikin
        type: string
    required:
    - model
    - vendor
    type: object
  server.SetControllerRequest:
    properties:
      kind:
        description: Kind - AIRCON, LIGHT, SWITCHBOT...
        example: AIRCON
        type: string
      name:
        description: Name - ex. Bedroom Airconditioner
        example: Bedroom Airconditioner
        type: string
      remote:
        $ref: '#/definitions/server.RemoteController'
        description: Remote - Remote Controller settings (required when type is REMOTE)
      switchbot:
        $ref: '#/definitions/server.SwitchBotController'
        description: SwitchBot - SwitchBot settings (required when type is SWITCHBOT)
      type:
        description: Type - type of controller (how to use?) / ex. REMOTE, SWITCHBOT...
        example: REMOTE
        type: string
    required:
    - kind
    - name
    - type
    type: object
  server.SwitchBotController:
    properties:
      mac:
        example: FF:FF:FF:FF:FF:FF
        type: string
      type:
        example: TOGGLE
        type: string
    required:
    - mac
    - type
    type: object
  server.UpdateAgentRequest:
    properties:
      address:
        description: Address of Pigent
        example: localhost:8081
        type: string
    required:
    - address
    type: object
  storage.Agent:
    properties:
      address:
        description: Address - Agent Address (ex. `localhost:8081`)
        example: localhost:8081
        type: string
      id:
        default: <UNIQUE_ID>
        description: ID - Agent ID
        type: string
      online:
        description: Online - Check online
        type: boolean
    required:
    - address
    type: object
  template.Action:
    properties:
      default:
        type: object
      list:
        items:
          type: object
        type: array
      multiple:
        items:
          $ref: '#/definitions/template.Action'
        type: array
      range:
        $ref: '#/definitions/template.Range'
      shot:
        $ref: '#/definitions/template.Shot'
      toggle:
        $ref: '#/definitions/template.Toggle'
      type:
        type: integer
    type: object
  template.Aircon:
    properties:
      modes:
        additionalProperties:
          $ref: '#/definitions/template.AirconMode'
        type: object
      operation:
        $ref: '#/definitions/template.Action'
    type: object
  template.AirconMode:
    properties:
      fan:
        $ref: '#/definitions/template.Action'
      horizontal_vane:
        $ref: '#/definitions/template.Action'
      humid:
        $ref: '#/definitions/template.Action'
      temp:
        $ref: '#/definitions/template.Action'
      vertical_vane:
        $ref: '#/definitions/template.Action'
    type: object
  template.Light:
    properties:
      brightness:
        $ref: '#/definitions/template.Action'
      color:
        $ref: '#/definitions/template.Action'
      mode:
        $ref: '#/definitions/template.Action'
    type: object
  template.Range:
    properties:
      from:
        type: number
      prefix:
        type: string
      step:
        type: number
      suffix:
        type: string
      to:
        type: number
    type: object
  template.Shot:
    properties:
      value:
        type: object
    type: object
  template.Template:
    properties:
      aircon:
        $ref: '#/definitions/template.Aircon'
        description: Aircon template
      kind:
        description: Target Kind
        example: aircon
        type: string
      light:
        $ref: '#/definitions/template.Light'
        description: Light template
      model:
        description: Target Model
        example: daikin01
        type: string
      vendor:
        description: Target vendor
        example: vendor
        type: string
    type: object
  template.Toggle:
    properties:
      "off":
        type: object
      "on":
        type: object
    type: object
info:
  contact: {}
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  title: Dash-Home API
  version: "1.0"
paths:
  /api/v1/agent:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/storage.Agent'
      summary: Get Agent entry
      tags:
      - agent
    post:
      consumes:
      - application/json
      parameters:
      - description: Add new agent
        in: body
        name: entry
        required: true
        schema:
          $ref: '#/definitions/server.UpdateAgentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/storage.Agent'
      summary: Add Agent entry
      tags:
      - agent
  /api/v1/agent/sensors:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/agent.Ambient'
      summary: Get Sensors status form agent
      tags:
      - agent
  /api/v1/controllers:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controller.Entry'
            type: array
      summary: Get controllers
      tags:
      - controller
    post:
      consumes:
      - application/json
      parameters:
      - description: Add new controller
        in: body
        name: entry
        required: true
        schema:
          $ref: '#/definitions/server.SetControllerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.Entry'
      summary: Add new controller
      tags:
      - controller
  /api/v1/controllers/:id:
    delete:
      produces:
      - application/json
      responses:
        "200": {}
      summary: Delete controller by ID
      tags:
      - controller
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.Entry'
      summary: Get controller by ID
      tags:
      - controller
    patch:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.Entry'
      summary: Patch controller by ID
      tags:
      - controller
  /api/v1/controllers/:id/aircon:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/aircon.Entry'
      summary: Post Aircon by ID
      tags:
      - controller
  /api/v1/controllers/:id/light:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/light.Entry'
      summary: Post Light by ID
      tags:
      - controller
  /api/v1/controllers/:id/switchbot:
    post:
      produces:
      - application/json
      responses:
        "200": {}
      summary: Post SwitchBot by ID
      tags:
      - controller
  /api/v1/controllers/:id/template:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/template.Template'
      summary: Get controller template by ID
      tags:
      - controller
  /api/v1/remotes:
    get:
      description: 'Entries like as: `{"aircon": {"daikin": ["daikin01", "daikin02"]}}`...'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.GetRemotesResponse'
      summary: Get remote controllers
      tags:
      - remotes
  /api/v1/room:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/room.Room'
      summary: Get Room entry
      tags:
      - room
    post:
      consumes:
      - application/json
      parameters:
      - description: Create new room
        in: body
        name: entry
        required: true
        schema:
          $ref: '#/definitions/server.CreateRoomRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/room.Entry'
      summary: Craete Room entry
      tags:
      - room
  /healthz:
    get:
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Check API Response for Health Check
swagger: "2.0"
